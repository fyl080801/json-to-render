import{o as n,c as s,a}from"./app.b15155e8.js";const p='{"title":"配置","description":"","frontmatter":{},"headers":[{"level":2,"title":"概览","slug":"概览"},{"level":2,"title":"组件相关","slug":"组件相关"},{"level":2,"title":"组件集合定义","slug":"组件集合定义"},{"level":2,"title":"监听定义","slug":"监听定义"}],"relativePath":"guide/configs.md","lastUpdated":1646557776963}',t={},e=a('<h1 id="配置"><a class="header-anchor" href="#配置" aria-hidden="true">#</a> 配置</h1><h2 id="概览"><a class="header-anchor" href="#概览" aria-hidden="true">#</a> 概览</h2><p>在了解配置之前需要先用一组示例代码表示一下 <code>json2render</code> 使用上的一些重要特征</p><div class="language-vue line-numbers-mode"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>j-render</span>\n    <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>model<span class="token punctuation">&quot;</span></span>\n    <span class="token attr-name">:fields</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>fields<span class="token punctuation">&quot;</span></span>\n    <span class="token attr-name">:datasource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>datasource<span class="token punctuation">&quot;</span></span>\n  <span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>j-render</span><span class="token punctuation">&gt;</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">\n<span class="token keyword">import</span> <span class="token punctuation">{</span> defineComponent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>\n<span class="token keyword">import</span> JRender <span class="token keyword">from</span> <span class="token string">&#39;json2render/vue-full&#39;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  components<span class="token operator">:</span> <span class="token punctuation">{</span> JRender <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 定义数据源</span>\n      datasource<span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 定义一个具有http请求的数据来源，在界面渲染后自动发起请求获取数据</span>\n        listdata<span class="token operator">:</span> <span class="token punctuation">{</span> type<span class="token operator">:</span> <span class="token string">&#39;fetch&#39;</span><span class="token punctuation">,</span> url<span class="token operator">:</span> <span class="token string">&#39;/data.json&#39;</span><span class="token punctuation">,</span> auto<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token comment">// 初始化的数据，以及用于内部交互的数据</span>\n      model<span class="token operator">:</span> <span class="token punctuation">{</span>\n        text<span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token comment">// 要渲染的组件定义</span>\n      fields<span class="token operator">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">{</span> component<span class="token operator">:</span> <span class="token string">&#39;p&#39;</span><span class="token punctuation">,</span> text<span class="token operator">:</span> <span class="token string">&#39;Hello&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">{</span>\n          component<span class="token operator">:</span> <span class="token string">&#39;input&#39;</span><span class="token punctuation">,</span>\n          value<span class="token operator">:</span> <span class="token string">&#39;model.text&#39;</span><span class="token punctuation">,</span>\n          props<span class="token operator">:</span> <span class="token punctuation">{</span> placeholder<span class="token operator">:</span> <span class="token string">&#39;请输入&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">{</span> component<span class="token operator">:</span> <span class="token string">&#39;p&#39;</span><span class="token punctuation">,</span> text<span class="token operator">:</span> <span class="token string">&#39;Hello&#39;</span><span class="token punctuation">,</span> props<span class="token operator">:</span> <span class="token punctuation">{</span> style<span class="token operator">:</span> <span class="token string">&#39;color: red&#39;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">{</span>\n          component<span class="token operator">:</span> <span class="token string">&#39;button&#39;</span><span class="token punctuation">,</span>\n          text<span class="token operator">:</span> <span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span>\n          props<span class="token operator">:</span> <span class="token punctuation">{</span>\n            type<span class="token operator">:</span> <span class="token string">&#39;button&#39;</span><span class="token punctuation">,</span>\n            <span class="token comment">// 如果不是存储的配置，可以直接用函数</span>\n            <span class="token function-variable function">onClick</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n              <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;Hello&#39;</span><span class="token punctuation">)</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br></div></div><h2 id="组件相关"><a class="header-anchor" href="#组件相关" aria-hidden="true">#</a> 组件相关</h2><h4 id="modelvalue-object"><a class="header-anchor" href="#modelvalue-object" aria-hidden="true">#</a> modelValue (Object)</h4><p>动态渲染的组件成员使用的数据以及对外输出的数据，可通过传入值实现数据初始化或整体变更数据</p><h4 id="fields-array"><a class="header-anchor" href="#fields-array" aria-hidden="true">#</a> fields (Array)</h4><p>用于动态渲染的组件集合，<code>json2render</code> 会渲染什么样的视图以及支持的操作全在这个属性里定义</p><h4 id="datasource-object"><a class="header-anchor" href="#datasource-object" aria-hidden="true">#</a> datasource (Object)</h4><p>组件内部可使用的额外数据来源，和插件定义的数据源相对应</p><h4 id="listeners-array"><a class="header-anchor" href="#listeners-array" aria-hidden="true">#</a> listeners (Array)</h4><p>对数据的监听集合，定义 <code>listeners</code> 可实现监听组件内各种数据，在数据变化后触发一组操作实现联动</p><h4 id="setup-function"><a class="header-anchor" href="#setup-function" aria-hidden="true">#</a> setup (Function)</h4><p>组件初始化的事件，在事件中可以单独引用插件或者实现自定义功能，关于如何自定义请参考高级用法</p><h2 id="组件集合定义"><a class="header-anchor" href="#组件集合定义" aria-hidden="true">#</a> 组件集合定义</h2><p>组件 <code>fields</code> 属性是一个数组，成员具有如下基本属性</p><h4 id="component-string"><a class="header-anchor" href="#component-string" aria-hidden="true">#</a> component (String)</h4><p>表示组件的名称，任何 html 标签、组件库组件或自定义组件的名称都可以作为该属性值</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>如果是组件库或者是自定义组件，至少要保证在当前项目中是可用的，就是说要先引用相关组件</p></div><h4 id="props-object"><a class="header-anchor" href="#props-object" aria-hidden="true">#</a> props (Object)</h4><p>定义组件属性，组件所有属性都在这里定义</p><p>在 vue2 版本中 vue 渲染调用的 createElement 方法的第二个参数是一个对象，定义了组件的相关属性，这些属性还分 <code>attrs</code> <code>props</code> <code>domProps</code> <code>on</code> <code>nativeOn</code> 等等，在 vue3 中这种定义得到了改善，无论是 html 元素还是 vue 组件属性一律定义在一个对象中，事件也通过名称加上 <code>on</code> 前缀来表示，因此这里的 <code>props</code> 就是表示该组件的所有属性及事件的定义，具体看 vue3 关于此处的<a href="https://www.vue3js.cn/docs/zh/api/global-api.html#%E5%8F%82%E6%95%B0-2" target="_blank" rel="noopener noreferrer">概念描述</a></p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>props 里该写什么值可参考对应 html 元素的属性和相关组件库里组件定义的属性</p></div><h4 id="options-object"><a class="header-anchor" href="#options-object" aria-hidden="true">#</a> options (Object)</h4><p>是一个预留的属性，用于定义一些额外的选项，一般用不到</p><h2 id="监听定义"><a class="header-anchor" href="#监听定义" aria-hidden="true">#</a> 监听定义</h2><p>监听的作用是为了响应数据的变化，触发一组联动操作，比如当遇到级联选项的情况，在了解监听的用法之前最好先了解一下<a href="./prop-transform.html">属性表达式</a>的用法</p>',28);t.render=function(a,p,t,o,c,l){return n(),s("div",null,[e])};export default t;export{p as __pageData};
